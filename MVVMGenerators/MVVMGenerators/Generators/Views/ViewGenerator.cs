// using System.Linq;
// using System.Threading;
// using System.Diagnostics;
// using Microsoft.CodeAnalysis;
// using MVVMGenerators.Helpers;
// using System.Collections.Generic;
// using MVVMGenerators.Descriptions;
// using Microsoft.CodeAnalysis.CSharp;
// using System.Runtime.CompilerServices;
// using MVVMGenerators.Extensions.Symbols;
// using Microsoft.CodeAnalysis.CSharp.Syntax;
// using MVVMGenerators.Extensions.Declarations;
//
// namespace MVVMGenerators.Generators.Views;
//
// [Generator(LanguageNames.CSharp)]
// public class ViewGenerator : IIncrementalGenerator
// {
//     public void Initialize(IncrementalGeneratorInitializationContext context)
//     {
//         var provider = context.SyntaxProvider.CreateSyntaxProvider(SyntacticPredicate, FindViews)
//             .Where(foundForSourceGenerator => foundForSourceGenerator.IsNeed)
//             .Select((foundForSourceGenerator, _) => foundForSourceGenerator.Container);
//         
//         context.RegisterSourceOutput(
//             source: provider,
//             action: GenerateCode);
//     }
//
//     private static bool SyntacticPredicate(SyntaxNode node, CancellationToken cancellationToken)
//     {
//         var candidate = node switch
//         {
//             ClassDeclarationSyntax or StructDeclarationSyntax => node as TypeDeclarationSyntax,
//             _ => null
//         };
//
//         return candidate is not null
//             && candidate.Modifiers.Any(SyntaxKind.PartialKeyword)
//             && !candidate.Modifiers.Any(SyntaxKind.StaticKeyword)
//             && candidate.AttributeLists.Count > 0;
//     }
//
//     private static FoundForGenerator<ViewData> FindViews(GeneratorSyntaxContext context, CancellationToken cancellationToken)
//     {
//         Debug.Assert(context.Node is TypeDeclarationSyntax);
//         var candidate = Unsafe.As<TypeDeclarationSyntax>(context.Node);
//         if (!candidate.HasAttribute(context.SemanticModel, Classes.ViewAttribute.FullName)) return default;
//
//         var symbol = context.SemanticModel.GetDeclaredSymbol(candidate, cancellationToken);
//         if (symbol is null) return default;
//
//         var fields = new List<IFieldSymbol>();
//         foreach (var field in symbol.GetMembers().OfType<IFieldSymbol>())
//         {
//             if (field.Type is IArrayTypeSymbol arrayTypeSymbol 
//                 && arrayTypeSymbol.ElementType.HasInterface(Classes.IBinder))
//             {
//                 fields.Add(field);
//             }
//             else if (field.Type.HasInterface(Classes.IBinder))
//             {
//                 fields.Add(field);
//             }
//         }
//         
//         if (!fields.Any()) return default;
//         
//         var inheritor = ViewInheritor.None;
//
//         for (var type = symbol.BaseType; type != null; type = type.BaseType)
//         {
//             if (!type.HasAttribute(Classes.ViewAttribute.FullName)) continue;
//             
//             inheritor = ViewInheritor.InheritorViewAttribute;
//             return new FoundForGenerator<ViewData>(true, new ViewData(inheritor, candidate, fields));
//         }
//         
//         if (symbol.HasBaseType(Classes.MonoView))
//         {
//             inheritor = ViewInheritor.InheritorMonoView;
//             
//             foreach (var method in symbol.GetMembers().OfType<IMethodSymbol>())
//             {
//                 if (!method.IsOverride) continue;
//                 if (method.DeclaredAccessibility != Accessibility.Protected) continue;
//                 if (method.Parameters.Length != 0) continue;
//                 if (method.Name != "GetBinders") continue;
//                 if (method.ReturnType.ToDisplayString() != Classes.IReadOnlyBindersCollectionById.FullName) continue;
//
//                 inheritor = ViewInheritor.OverrideMonoView;
//                 break;
//             }
//         }
//         else if (symbol.HasInterface(Classes.IView))
//         {
//             inheritor = ViewInheritor.HasInterface;
//         }
//
//         return new FoundForGenerator<ViewData>(true, new ViewData(inheritor, candidate, fields));
//     }
//     
//     private static void GenerateCode(SourceProductionContext context, ViewData viewData)
//     {
//         var declaration = viewData.Declaration;
//         var namespaceName = declaration.GetNamespaceName();
//         var declarationText = declaration.GetDeclarationText();
//         
//         var code = new CodeWriter();
//         code.AppendLine("// <auto-generated>");
//         
//         if (!string.IsNullOrEmpty(namespaceName))
//         {
//             code.AppendLine($"namespace {namespaceName}")
//                 .BeginBlock();   
//         }
//
//         code.AppendLine(viewData.Inheritor != ViewInheritor.None
//             ? $"{declarationText}"
//             : $"{declarationText} : {Classes.IView.Global}")
//             .BeginBlock()
//             .AppendIViewBody(viewData)
//             .EndBlock();
//         
//         if (!string.IsNullOrEmpty(namespaceName))
//             code.EndBlock();
//             
//         context.AddSource($"{declarationText.Name}.IView.Generated.cs", code.GetSourceText());
//     }
// }