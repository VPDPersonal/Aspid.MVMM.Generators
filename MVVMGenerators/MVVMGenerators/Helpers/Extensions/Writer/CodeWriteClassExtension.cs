using System;

namespace MVVMGenerators.Helpers.Extensions.Writer;

public static class CodeWriteClassExtension
{
    public static CodeWriter AppendClass(
        this CodeWriter code, 
        string @namespace, 
        DeclarationText declaration, 
        Action? body, params string[]? baseTypes)
    {
        code.AppendClassBegin(@namespace, declaration, baseTypes);
        body?.Invoke();
        code.AppendClassEnd(@namespace);

        return code;
    }

    public static CodeWriter AppendClassBegin(
        this CodeWriter code, 
        string? @namespace, 
        DeclarationText declaration,
        params string[]? baseTypes)
    {
        var hasNamespace = !string.IsNullOrEmpty(@namespace);
        
        var baseTypesText = "";
        if (baseTypes is { Length: > 0 }) baseTypesText = $" : {string.Join(",", baseTypes!)}";
        
        code.AppendLine("// <auto-generated>")
            .AppendChildIf(hasNamespace, () => code
                .AppendLine($"namespace {@namespace}")
                .BeginBlock())
            .AppendLine($"{declaration}{baseTypesText}")
            .BeginBlock();

        return code;
    }

    public static CodeWriter AppendClassEnd(this CodeWriter code, string? @namespace)
    {
        code.AppendClassEnd(!string.IsNullOrEmpty(@namespace));
        return code;
    }
    
    private static CodeWriter AppendClassEnd(this CodeWriter code, bool hasNamespace)
    {
        code.EndBlock()
            .EndBlockIf(hasNamespace);
        return code;
    }
}