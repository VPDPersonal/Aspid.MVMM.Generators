using System.Threading;
using System.Diagnostics;
using Microsoft.CodeAnalysis;
using MVVMGenerators.Helpers;
using System.Collections.Generic;
using Microsoft.CodeAnalysis.CSharp;
using System.Runtime.CompilerServices;
using MVVMGenerators.Extensions.Symbols;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using MVVMGenerators.Extensions.Declarations;

namespace MVVMGenerators;

[Generator(LanguageNames.CSharp)]
public class ViewModelGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var provider = context.SyntaxProvider.CreateSyntaxProvider(SyntacticPredicate, FindViewModels)
            .Where(foundForSourceGenerator => foundForSourceGenerator.IsNeed)
            .Select((foundForSourceGenerator, _) => foundForSourceGenerator.Container);
        
        context.RegisterSourceOutput(
            source: provider,
            action: GenerateCode);
    }
    
    private static bool SyntacticPredicate(SyntaxNode node, CancellationToken cancellationToken)
    {
        var candidate = node switch
        {
            ClassDeclarationSyntax or StructDeclarationSyntax => node as TypeDeclarationSyntax,
            _ => null
        };
    
        return candidate is not null
            && candidate.AttributeLists.Count > 0
            && candidate.Modifiers.Any(SyntaxKind.PartialKeyword)
            && !candidate.Modifiers.Any(SyntaxKind.StaticKeyword);
    }
    
    private static FoundForGenerator<ViewModelData> FindViewModels(GeneratorSyntaxContext context, CancellationToken cancellationToken)
    {
        Debug.Assert(context.Node is TypeDeclarationSyntax);
        var candidate = Unsafe.As<TypeDeclarationSyntax>(context.Node);
        if (!candidate.HasAttribute(context.SemanticModel, "UltimateUI.MVVM.ViewModels.ViewModelAttribute")) return default;

        var symbol = context.SemanticModel.GetDeclaredSymbol(candidate, cancellationToken);
        if (symbol is null) return default;
    
        var fields = new List<IFieldSymbol>();
        var methods = new List<IMethodSymbol>();
    
        foreach (var member in symbol.GetMembers())
        {
            switch (member)
            {
                case IFieldSymbol field:
                    if (field.HasAttribute("UltimateUI.MVVM.ViewModels.BindAttribute")) 
                        fields.Add(field);
                    break;
                
                case IMethodSymbol method: 
                    if (method.HasAttribute("UltimateUI.MVVM.ViewModels.BindCommandAttribute")) 
                        methods.Add(method);
                    break;
            }
        }
    
        var hasInterface = symbol.HasInterface("UltimateUI.MVVM.ViewModels.IViewModel");
        return new FoundForGenerator<ViewModelData>(true, new ViewModelData(hasInterface, candidate, fields, methods));
    }
    
    private static void GenerateCode(SourceProductionContext context, ViewModelData viewModel)
    {
        var declaration = viewModel.Declaration;
        var namespaceName = declaration.GetNamespaceName();
        var declarationText = declaration.GetDeclarationText();
        
        var codeWriter = new CodeWriter();
        codeWriter.AppendLine("// <auto-generated>");
        
        if (!string.IsNullOrEmpty(namespaceName))
        {
            codeWriter
                .AppendLine($"namespace {namespaceName}")
                .BeginBlock();   
        }
        
        codeWriter
            .AppendLine(declarationText.ToString())
            .BeginBlock();
        
        codeWriter.EndBlock();
        
        if (!string.IsNullOrEmpty(namespaceName))
            codeWriter.EndBlock();
        
        context.AddSource($"{declarationText.Name}.Bind.Generated.cs", codeWriter.GetSourceText());
    }
    
    public readonly struct ViewModelData(
        bool hasViewModelInterface,
        TypeDeclarationSyntax declaration,
        IReadOnlyCollection<IFieldSymbol> fields, 
        IReadOnlyCollection<IMethodSymbol> methods)
    {
        public readonly bool HasViewModelInterface = hasViewModelInterface;
        
        public readonly TypeDeclarationSyntax Declaration = declaration;
        public readonly IReadOnlyCollection<IFieldSymbol> Fields = fields;
        public readonly IReadOnlyCollection<IMethodSymbol> Methods = methods;
    }
}